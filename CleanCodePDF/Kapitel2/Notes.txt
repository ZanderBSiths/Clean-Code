* Use intention-revealing names
    - The name of a variable, function, or class, should answer all the big questions. It
    should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent. 

    bad example:
        int d; // elapsed time in days

    good example:
        int elapsedTimeInDays
    
    - Choosing names that reveal intent can make it much easier to understand and change code

* Avoid Disinformation
    - We should avoid words whose entrenched meanings vary from our intended meaning. For example,hp, aix, and sco
    - Do not refer to a grouping of accounts as an accountList unless it’s actually a List.
        * If the container holding the accounts is not actually a List, it may lead to false conclusions.
        * So accountGroup or bunchOfAccounts or just plain accounts would be better
    - Spelling similar concepts similarly is information. Using incosisten spellings is disinformation

* Make meaningfil distinctions
    - If names must be different, then they should also mean something different.
    - Number-series naming (a1, a2, .. aN) is the opposite of intentional naming. they are noninformative

    - How are the programmers in this project supposed to know which of these functions to call?
    getActiveAccount();
    getActiveAccounts();
    getActiveAccountInfo();
    
* Use Pronounceable Names
    - If you can’t pronounce it, you can’t discuss it without sounding like an idiot

    Bad:
        class DtaRcrd102 {
            private Date genymdhms; 
            private Date modymdhms;
            private final String pszqint = "102";
            /* ... */
        };

    Good:
        class Customer {
            private Date generationTimestamp; 
            private Date modificationTimestamp;;
            private final String recordId = "102";
            /* ... */
        };
    Intelligent conversation is now possible

* Use Searchable Name
    - Single-letter names and numeric constants have a particular problem in that they are not easy to locate across a body of text
    -  longer names trump shorter names, and any searchable name trumps a constant in code
    -  personal preference is that single-letter names can ONLY be used as local variables inside short methods. 
    The length of a name should correspond to the size of its scope

* Avoid Encodings
    - Encoding type or scope information into names simply adds an extra burden of deciphering
    - Encoded names are seldom pronounceable and are easy to mis-type.

* Hungarian Notation
    Hungarian notation is an identifier naming convention in computer programming in which the name of a variable or function
    indicates its intention or kind, or in some dialects, its type.

* Member Prefixes
    - don’t need to prefix member variables with m_ anymore
    - Your classes and functions should be small enough that you dont need them.
    - you should be using an editing environment that highlights or colorizes members to make them distinct